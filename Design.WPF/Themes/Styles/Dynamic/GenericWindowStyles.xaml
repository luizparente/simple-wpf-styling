<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:theme="clr-namespace:Design.WPF">
	<!--Windows are a bit trickier to standardize, because "x:Type Window" does not
	target MainWindow, since these are not the same type.
	That said, styling by window category can be a viable solution. This requires
	property Window.Style to be initialized by the Window instance itself.-->
	<Style x:Key="GenericWindowStyle" TargetType="{x:Type Window}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="Width" Value="500"/>
		<Setter Property="Height" Value="575"/>
		<Setter Property="ResizeMode" Value="CanMinimize" />
		<Setter Property="Background" Value="{theme:ThemeResource ResourceKey=ContentBackground}"/>

		<!--Static Window styling example:-->
		<!--<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Window}">
					<Grid>
						<Grid.Background>
							<SolidColorBrush Color="#cccccc"/>
						</Grid.Background>
						<AdornerDecorator>
							<ContentPresenter />
						</AdornerDecorator>
						<ResizeGrip x:Name="WindowResizeGrip"
									  HorizontalAlignment="Right"
									  VerticalAlignment="Bottom"
									  Visibility="Collapsed"
									  IsTabStop="false" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="ResizeMode" Value="CanResizeWithGrip">
							<Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>-->
	</Style>

	<Style BasedOn="{StaticResource GenericWindowStyle}" TargetType="{x:Type Window}"/>
</ResourceDictionary>