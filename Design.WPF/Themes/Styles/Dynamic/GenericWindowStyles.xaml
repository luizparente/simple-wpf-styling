<ResourceDictionary x:Class="Design.WPF.Themes.Styles.Dynamic.GenericWindowStyles"
					xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:theme="clr-namespace:Design.WPF">
	<!--Windows are a bit trickier to standardize, because "x:Type Window" does not
	target MainWindow, since these are not the same type.
	That said, styling by window category can be a viable solution. This requires
	property Window.Style to be initialized by the Window instance itself.-->
	<Style x:Key="GenericWindowStyle" TargetType="{x:Type Window}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="Width" Value="500"/>
		<Setter Property="Height" Value="530"/>
		<Setter Property="ResizeMode" Value="CanMinimize"/>

		<!--If no templating is required, the line below suffices for background setting.-->
		<!--<Setter Property="Background" Value="{theme:ThemeResource ResourceKey=ContentBackground}"/>-->

		<!--Defining Window template:-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Window}">
					<Border>
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="30"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>

							<!--Title bar-->
							<Grid Grid.Row="0">
								<Rectangle Height="30" Fill="{theme:ThemeResource ResourceKey=DefaultGradient}"/>
								<DockPanel LastChildFill="False">
									<TextBlock Margin="8 0 0 0"
											   VerticalAlignment="Center"
											   DockPanel.Dock="Left"
											   Foreground="{theme:ThemeResource ResourceKey=PrimaryAccentContrast}"
											   Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"/>

									<Button Click="OnClose"
											WindowChrome.IsHitTestVisibleInChrome="True"
											Content="X"
											DockPanel.Dock="Right"
											Style="{DynamicResource WindowButtonStyle}"/>

									<Button Click="OnMaximize"
											WindowChrome.IsHitTestVisibleInChrome="True"
											Content="M"
											DockPanel.Dock="Right"
											Style="{DynamicResource WindowButtonStyle}"/>

									<Button Click="OnMinimize"
											WindowChrome.IsHitTestVisibleInChrome="True"
											Content="m"
											DockPanel.Dock="Right"
											Style="{DynamicResource WindowButtonStyle}"/>
									
									<Button Click="OnSwitchThemes"
											WindowChrome.IsHitTestVisibleInChrome="True"
											Content="D"
											DockPanel.Dock="Right"
											Style="{DynamicResource WindowButtonStyle}"/>
								</DockPanel>
							</Grid>

							<!--Content-->
							<Grid Grid.Row="1" Background="{theme:ThemeResource ResourceKey=ContentBackground}">
								<AdornerDecorator>
									<ContentPresenter />
								</AdornerDecorator>
								<!--<ResizeGrip x:Name="WindowResizeGrip"
									  HorizontalAlignment="Right"
									  VerticalAlignment="Bottom"
									  Visibility="Collapsed"
									  IsTabStop="false" />-->
							</Grid>
							<!--<ControlTemplate.Triggers>
								<Trigger Property="ResizeMode" Value="CanResizeWithGrip">
									<Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
								</Trigger>
							</ControlTemplate.Triggers>-->
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<!--Adjusting Window title bar.-->
		<Setter Property="UseLayoutRounding" Value="True"/>
		<Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
		<Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
		<Setter Property="WindowChrome.WindowChrome">
			<Setter.Value>
				<WindowChrome CaptionHeight="30"
							  CornerRadius="20"
							  GlassFrameThickness="0"
							  NonClientFrameEdges="None"
							  ResizeBorderThickness="4"
							  UseAeroCaptionButtons="False"/>
			</Setter.Value>
		</Setter>
	</Style>

	<Style BasedOn="{StaticResource GenericWindowStyle}" TargetType="{x:Type Window}"/>
</ResourceDictionary>